plugins {
    id "com.android.application"
    id "kotlin-android"
    // Ensure this plugin ID is correct for your Flutter version
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Read Flutter defined min SDK, provide a fallback if not found
def flutterMinSdkVersion = localProperties.getProperty('flutter.minSdkVersion')
if (flutterMinSdkVersion == null) {
    flutterMinSdkVersion = '21' // Sensible default, adjust if needed
}


android {
    // Make sure this namespace is correct for your project
    namespace "com.example.flutter_upgrde_app"

    // Explicitly set compileSdkVersion (Recommended: 34 for AGP 8.x)
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion // Keep using Flutter's NDK version

    compileOptions {
        // --- FIX: Update to Java 21 ---
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    kotlinOptions {
        // --- FIX: Update to Java 21 target ---
        jvmTarget = '21'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // Make sure this applicationId is correct for your project
        applicationId "com.example.flutter_upgrde_app"

        // Use the read value (or fallback) for minSdkVersion
        minSdkVersion flutterMinSdkVersion.toInteger()
        // Explicitly set targetSdkVersion (Recommended: 34)
        targetSdkVersion 34

        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            signingConfig signingConfigs.debug // Use your actual release signing config
            // Add other release configurations like ProGuard/R8 if needed
            // minifyEnabled false
            // shrinkResources false
            // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    // Flutter adds its dependencies automatically.
    // Add any other specific Android dependencies here if needed.
}
